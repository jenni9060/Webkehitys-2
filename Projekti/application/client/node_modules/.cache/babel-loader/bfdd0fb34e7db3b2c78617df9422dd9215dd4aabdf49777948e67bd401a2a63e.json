{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual studio projects\\\\webkehitys-2\\\\Projekti\\\\application\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Weather from './components/Weather';\nimport Footer from './components/Footer';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Tila rekisteröintidialogille\n  const [isRegisterOpen, setIsRegisterOpen] = useState(false);\n  // Paikkakunnan ja säädatan tila\n  let [city, setCity] = useState('Helsinki');\n  const [searchCity, setSearchCity] = useState(''); // Käyttäjän syöttämä paikkakunta\n  const [weatherData, setWeatherData] = useState(null); // Haettu säädata\n\n  const [user, setUser] = useState(null); // Käyttäjätiedot\n\n  // Tapahtumankäsittelijä rekisteröintidialogin avaamiseen\n  const OpenRegisterDialog = () => {\n    setIsRegisterOpen(true); // Näytä dialogi\n  };\n\n  // Tapahtumankäsittelijä rekisteröintidialogin sulkemiseen\n  const CloseRegisterDialog = () => {\n    setIsRegisterOpen(false); // Piilota dialogi\n  };\n\n  // Tila Kirjautumisdialogille\n  let [isLoginOpen, setIsLoginOpen] = useState(false);\n\n  // Tapahtumankäsittelijä rekisteröintidialogin avaamiseen\n  const OpenLoginDialog = () => {\n    setIsLoginOpen(true); // Näytä dialogi\n  };\n\n  // Tapahtumankäsittelijä rekisteröintidialogin sulkemiseen\n  const CloseLoginDialog = () => {\n    setIsLoginOpen(false); // Piilota dialogi\n  };\n\n  // Tapahtumankäsittelijä onnistuneeseen kirjautumiseen\n  const handleLoginSuccess = user => {\n    sessionStorage.setItem('token', user.token); // Tallenna token SessionStorageen\n    console.log('user token ', user.token);\n    sessionStorage.setItem('location', user.location); // Tallenna kotipaikkakunta SessionStorageen\n    setUser(user); // Tallenna käyttäjän tiedot Reactin tilaan\n    fetchWeatherData(user.location); // Kutsu säädatan hakemista käyttäjän kotipaikkakunnalle\n    CloseLoginDialog(); // Sulje kirjautumisdialogi\n  };\n\n  // Tapahtumankäsittelijä uloskirjautumiseen\n  const logoutHandler = () => {\n    sessionStorage.removeItem('token'); // Poista token SessionStoragesta\n    sessionStorage.removeItem('location'); // Poista kotipaikkakunta SessionStoragesta\n    setUser(null); // Nollaa käyttäjätila\n    setSearchCity(''); // Tyhjennä hakukenttä\n    setCity('Helsinki'); // Aseta oletuskaupungiksi Helsinki\n    fetchWeatherData('Helsinki'); // Hae Helsingin säädata\n  };\n\n  // Hae koordinaatit paikkakunnalle\n  const getCoordinates = async city => {\n    const geocodeApiUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(city)}&format=json&addressdetails=1&limit=1`;\n    try {\n      const response = await fetch(geocodeApiUrl);\n      const data = await response.json();\n      if (data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        return {\n          latitude: lat,\n          longitude: lon\n        };\n      } else {\n        throw new Error('Paikkakuntaa ei löytynyt.');\n      }\n    } catch (error) {\n      console.error('Virhe koordinaattien hakemisessa:', error);\n      alert('Virhe paikkakunnan hakemisessa. Tarkista syöttö.');\n      return null;\n    }\n  };\n\n  // Muotoile säädata haluttuun muotoon\n  const formatWeatherData = data => {\n    // Luodaan tyhjä taulukko muotoiltuja säädatan objekteja varten\n    const formattedData = [];\n\n    // Käydään läpi indeksit 0-6 (7 päivää)\n    for (let index = 0; index < 7; index++) {\n      // Luodaan objekti kullekin päivälle datan perusteella\n      const dayData = {\n        time: data.time[index],\n        temperature_2m_max: data.temperature_2m_max[index],\n        temperature_2m_min: data.temperature_2m_min[index],\n        rain_sum: data.rain_sum[index],\n        wind_speed_10m_max: data.wind_speed_10m_max[index],\n        daylight_duration: data.daylight_duration[index],\n        sunset: data.sunset[index]\n      };\n\n      // Lisätään objekti uuteen taulukkoon\n      formattedData.push(dayData);\n    }\n    return formattedData; // Palautetaan muotoiltu taulukko\n  };\n\n  // Hae säätiedot paikkakunnan koordinaattien perusteella\n  const fetchWeatherData = async searchCity => {\n    let cityToSearch = searchCity || city; // Käytetään käyttäjän syöttämää paikkakuntaa tai oletuskaupunkia\n    try {\n      // Käytä getCoordinates hakeaksesi koordinaatit\n      const coordinates = await getCoordinates(cityToSearch);\n      // Jos koordinaatteja ei löydy, palataan oletuskaupunkiin\n      if (!coordinates) {\n        console.warn('Paikkakuntaa ei löytynyt. Käytetään oletuskaupunkia.');\n        cityToSearch = city; // Päivitä kaupunki oletukseen (Helsinki)\n        const defaultCoordinates = await getCoordinates(cityToSearch); // Hae koordinaatit oletukselle\n        if (!defaultCoordinates) throw new Error('Oletuspaikkakunnan koordinaattien haku epäonnistui.');\n        coordinates.latitude = defaultCoordinates.latitude;\n        coordinates.longitude = defaultCoordinates.longitude;\n      }\n      const {\n        latitude,\n        longitude\n      } = coordinates;\n\n      // Hae sää Apista\n      const apiUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=temperature_2m_max,temperature_2m_min,rain_sum,wind_speed_10m_max,sunset,daylight_duration&timezone=auto`;\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n      const formattedData = formatWeatherData(data.daily);\n\n      // Päivitä kaupunki ja säädata tilaan\n      setCity(cityToSearch);\n      setWeatherData(formattedData);\n\n      // Tallenna hakuhistoria, jos käyttäjä on kirjautunut\n      const token = sessionStorage.getItem('token'); // Hae token sessionStorage:sta\n      if (user && token) {\n        await fetch('http://localhost:5000/search', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            searched_city: cityToSearch\n          })\n        });\n      }\n    } catch (error) {\n      console.error('Virhe säädatan hakemisessa:', error);\n      alert('Virhe säädatan hakemisessa. Tarkista yhteys tai kaupungin nimi.');\n    }\n  };\n\n  // Hae oletuskaupunki Helsinki automaattisesti\n  useEffect(() => {\n    const token = sessionStorage.getItem('token'); // Hae token SessionStoragesta\n    const homeLocation = sessionStorage.getItem('location'); // Hae kotipaikkakunta SessionStoragesta\n\n    if (token && homeLocation) {\n      setUser({\n        token,\n        location: homeLocation\n      }); // Palauta käyttäjätila\n      fetchWeatherData(homeLocation); // Hae säätiedot käyttäjän kotipaikkakunnalle\n    } else {\n      fetchWeatherData(city); // Hae sää oletuskaupungille\n    }\n  }, []); // Tyhjä dependency array -> suoritetaan vain kerran\n\n  const showFooter = !user; // Näytä footer vain, jos käyttäjä ei ole kirjautunut\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onRegisterClick: OpenRegisterDialog,\n      onLoginClick: OpenLoginDialog,\n      user: user,\n      onLogoutClick: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      searchCity: searchCity,\n      setSearchCity: setSearchCity // Päivitetään hakukentän tila\n      ,\n      onSearch: city => fetchWeatherData(city || searchCity) // Haetaan säätiedot \"Hae sää\" -painikkeen painalluksella\n      ,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Weather, {\n      data: weatherData,\n      city: city,\n      isWeekly: !!(user !== null && user !== void 0 && user.token)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 4\n    }, this), showFooter && /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }, this), isRegisterOpen && /*#__PURE__*/_jsxDEV(Register, {\n      onClose: CloseRegisterDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 23\n    }, this), isLoginOpen && /*#__PURE__*/_jsxDEV(Login, {\n      onClose: CloseLoginDialog,\n      onLoginSuccess: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"Zc1/G1uAeBDYYYkgUUo1sGAwt10=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Search","Weather","Footer","Register","Login","jsxDEV","_jsxDEV","App","_s","isRegisterOpen","setIsRegisterOpen","city","setCity","searchCity","setSearchCity","weatherData","setWeatherData","user","setUser","OpenRegisterDialog","CloseRegisterDialog","isLoginOpen","setIsLoginOpen","OpenLoginDialog","CloseLoginDialog","handleLoginSuccess","sessionStorage","setItem","token","console","log","location","fetchWeatherData","logoutHandler","removeItem","getCoordinates","geocodeApiUrl","encodeURIComponent","response","fetch","data","json","length","lat","lon","latitude","longitude","Error","error","alert","formatWeatherData","formattedData","index","dayData","time","temperature_2m_max","temperature_2m_min","rain_sum","wind_speed_10m_max","daylight_duration","sunset","push","cityToSearch","coordinates","warn","defaultCoordinates","apiUrl","daily","getItem","method","headers","Authorization","body","JSON","stringify","searched_city","homeLocation","showFooter","className","children","onRegisterClick","onLoginClick","onLogoutClick","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","isWeekly","onClose","onLoginSuccess","_c","$RefreshReg$"],"sources":["C:/Visual studio projects/webkehitys-2/Projekti/application/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Weather from './components/Weather';\nimport Footer from './components/Footer';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport './App.css';\n\nfunction App() {\n\t// Tila rekisteröintidialogille\n\tconst [isRegisterOpen, setIsRegisterOpen] = useState(false);\n\t// Paikkakunnan ja säädatan tila\n\tlet [city, setCity] = useState('Helsinki');\n\tconst [searchCity, setSearchCity] = useState(''); // Käyttäjän syöttämä paikkakunta\n\tconst [weatherData, setWeatherData] = useState(null); // Haettu säädata\n\n\tconst [user, setUser] = useState(null); // Käyttäjätiedot\n\n\t// Tapahtumankäsittelijä rekisteröintidialogin avaamiseen\n\tconst OpenRegisterDialog = () => {\n\t\tsetIsRegisterOpen(true); // Näytä dialogi\n\t};\n\n\t// Tapahtumankäsittelijä rekisteröintidialogin sulkemiseen\n\tconst CloseRegisterDialog = () => {\n\t\tsetIsRegisterOpen(false); // Piilota dialogi\n\t};\n\n\t// Tila Kirjautumisdialogille\n\tlet [isLoginOpen, setIsLoginOpen] = useState(false);\n\n\t// Tapahtumankäsittelijä rekisteröintidialogin avaamiseen\n\tconst OpenLoginDialog = () => {\n\t\tsetIsLoginOpen(true); // Näytä dialogi\n\t};\n\n\t// Tapahtumankäsittelijä rekisteröintidialogin sulkemiseen\n\tconst CloseLoginDialog = () => {\n\t\tsetIsLoginOpen(false); // Piilota dialogi\n\t};\n\n\t// Tapahtumankäsittelijä onnistuneeseen kirjautumiseen\n\tconst handleLoginSuccess = (user) => {\n\t\tsessionStorage.setItem('token', user.token); // Tallenna token SessionStorageen\n\t\tconsole.log('user token ', user.token);\n\t\tsessionStorage.setItem('location', user.location); // Tallenna kotipaikkakunta SessionStorageen\n\t\tsetUser(user); // Tallenna käyttäjän tiedot Reactin tilaan\n\t\tfetchWeatherData(user.location); // Kutsu säädatan hakemista käyttäjän kotipaikkakunnalle\n\t\tCloseLoginDialog(); // Sulje kirjautumisdialogi\n\n\t};\n\n\t// Tapahtumankäsittelijä uloskirjautumiseen\n\tconst logoutHandler = () => {\n\t\tsessionStorage.removeItem('token'); // Poista token SessionStoragesta\n\t\tsessionStorage.removeItem('location'); // Poista kotipaikkakunta SessionStoragesta\n\t\tsetUser(null); // Nollaa käyttäjätila\n\t\tsetSearchCity(''); // Tyhjennä hakukenttä\n\t\tsetCity('Helsinki'); // Aseta oletuskaupungiksi Helsinki\n\t\tfetchWeatherData('Helsinki'); // Hae Helsingin säädata\n\t};\n\t\n\n\t// Hae koordinaatit paikkakunnalle\n\tconst getCoordinates = async (city) => {\n\n\t\tconst geocodeApiUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(city)}&format=json&addressdetails=1&limit=1`;\n\t\ttry {\n\t\t\tconst response = await fetch(geocodeApiUrl);\n\t\t\tconst data = await response.json();\n\t\t\tif (data.length > 0) {\n\t\t\t\tconst { lat, lon } = data[0];\n\t\t\t\treturn { latitude: lat, longitude: lon };\n\t\t\t} else {\n\t\t\t\tthrow new Error('Paikkakuntaa ei löytynyt.');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Virhe koordinaattien hakemisessa:', error);\n\t\t\talert('Virhe paikkakunnan hakemisessa. Tarkista syöttö.');\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t// Muotoile säädata haluttuun muotoon\n\tconst formatWeatherData = (data) => {\n\t\t// Luodaan tyhjä taulukko muotoiltuja säädatan objekteja varten\n\t\tconst formattedData = [];\n\n\t\t// Käydään läpi indeksit 0-6 (7 päivää)\n\t\tfor (let index = 0; index < 7; index++) {\n\t\t\t// Luodaan objekti kullekin päivälle datan perusteella\n\t\t\tconst dayData = {\n\t\t\t\ttime: data.time[index],\n\t\t\t\ttemperature_2m_max: data.temperature_2m_max[index],\n\t\t\t\ttemperature_2m_min: data.temperature_2m_min[index],\n\t\t\t\train_sum: data.rain_sum[index],\n\t\t\t\twind_speed_10m_max: data.wind_speed_10m_max[index],\n\t\t\t\tdaylight_duration: data.daylight_duration[index],\n\t\t\t\tsunset: data.sunset[index],\n\t\t\t};\n\n\t\t\t// Lisätään objekti uuteen taulukkoon\n\t\t\tformattedData.push(dayData);\n\t\t}\n\n\t\treturn formattedData; // Palautetaan muotoiltu taulukko\n\t};\n\n\n\n\t// Hae säätiedot paikkakunnan koordinaattien perusteella\n\tconst fetchWeatherData = async (searchCity) => {\n\t\tlet cityToSearch = searchCity || city; // Käytetään käyttäjän syöttämää paikkakuntaa tai oletuskaupunkia\n\t\ttry {\n\t\t\t// Käytä getCoordinates hakeaksesi koordinaatit\n\t\t\tconst coordinates = await getCoordinates(cityToSearch);\n\t\t\t// Jos koordinaatteja ei löydy, palataan oletuskaupunkiin\n\t\t\tif (!coordinates) {\n\t\t\t\tconsole.warn('Paikkakuntaa ei löytynyt. Käytetään oletuskaupunkia.');\n\t\t\t\tcityToSearch = city; // Päivitä kaupunki oletukseen (Helsinki)\n\t\t\t\tconst defaultCoordinates = await getCoordinates(cityToSearch); // Hae koordinaatit oletukselle\n\t\t\t\tif (!defaultCoordinates) throw new Error('Oletuspaikkakunnan koordinaattien haku epäonnistui.');\n\t\t\t\tcoordinates.latitude = defaultCoordinates.latitude;\n\t\t\t\tcoordinates.longitude = defaultCoordinates.longitude;\n\t\t\t}\n\n\t\t\tconst { latitude, longitude } = coordinates;\n\n\t\t\t// Hae sää Apista\n\t\t\tconst apiUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=temperature_2m_max,temperature_2m_min,rain_sum,wind_speed_10m_max,sunset,daylight_duration&timezone=auto`;\n\t\t\tconst response = await fetch(apiUrl);\n\t\t\tconst data = await response.json();\n\n\t\t\tconst formattedData = formatWeatherData(data.daily);\n\n\t\t\t// Päivitä kaupunki ja säädata tilaan\n\t\t\tsetCity(cityToSearch);\n\t\t\tsetWeatherData(formattedData);\n\n\t\t\t// Tallenna hakuhistoria, jos käyttäjä on kirjautunut\n\t\t\tconst token = sessionStorage.getItem('token'); // Hae token sessionStorage:sta\n\t\t\tif (user && token) {\n\t\t\t\tawait fetch('http://localhost:5000/search', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ searched_city: cityToSearch }),\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Virhe säädatan hakemisessa:', error);\n\t\t\talert('Virhe säädatan hakemisessa. Tarkista yhteys tai kaupungin nimi.');\n\t\t}\n\t};\n\n\t// Hae oletuskaupunki Helsinki automaattisesti\n\tuseEffect(() => {\n\t\tconst token = sessionStorage.getItem('token'); // Hae token SessionStoragesta\n\t\tconst homeLocation = sessionStorage.getItem('location'); // Hae kotipaikkakunta SessionStoragesta\n\t\t\n\t\tif (token && homeLocation) {\n\t\t\tsetUser({ token, location: homeLocation }); // Palauta käyttäjätila\n\t\t\tfetchWeatherData(homeLocation); // Hae säätiedot käyttäjän kotipaikkakunnalle\n\t\t} else {\n\t\t\tfetchWeatherData(city); // Hae sää oletuskaupungille\n\t\t}\n\t}, []); // Tyhjä dependency array -> suoritetaan vain kerran\n\n\tconst showFooter = !user; // Näytä footer vain, jos käyttäjä ei ole kirjautunut\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header \n\t\t\t\tonRegisterClick={OpenRegisterDialog} \n\t\t\t\tonLoginClick={OpenLoginDialog} \n\t\t\t\tuser={user} \n\t\t\t\tonLogoutClick={logoutHandler} \n\t\t\t/>\n\t\t\t<Search\n\t\t\t\tsearchCity={searchCity}\n\t\t\t\tsetSearchCity={setSearchCity} // Päivitetään hakukentän tila\n\t\t\t\tonSearch={(city) => fetchWeatherData(city || searchCity)} // Haetaan säätiedot \"Hae sää\" -painikkeen painalluksella\n\t\t\t\tuser={user}\n\t\t\t/>\n\t\t\t<Weather data={weatherData} city={city} isWeekly={!!user?.token} />\n\t\t\t{showFooter && <Footer />}\n\t\t\t{isRegisterOpen && <Register onClose={CloseRegisterDialog} />}\n\t\t\t{isLoginOpen && <Login onClose={CloseLoginDialog} onLoginSuccess={handleLoginSuccess} />}\n\t\t</div>\n\t);\n}\n\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC3D;EACA,IAAI,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,UAAU,CAAC;EAC1C,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMsB,kBAAkB,GAAGA,CAAA,KAAM;IAChCT,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMU,mBAAmB,GAAGA,CAAA,KAAM;IACjCV,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3B,CAAC;;EAED;EACA,IAAI,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAM0B,eAAe,GAAGA,CAAA,KAAM;IAC7BD,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC9BF,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAIR,IAAI,IAAK;IACpCS,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEV,IAAI,CAACW,KAAK,CAAC,CAAC,CAAC;IAC7CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEb,IAAI,CAACW,KAAK,CAAC;IACtCF,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEV,IAAI,CAACc,QAAQ,CAAC,CAAC,CAAC;IACnDb,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC;IACfe,gBAAgB,CAACf,IAAI,CAACc,QAAQ,CAAC,CAAC,CAAC;IACjCP,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAErB,CAAC;;EAED;EACA,MAAMS,aAAa,GAAGA,CAAA,KAAM;IAC3BP,cAAc,CAACQ,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACpCR,cAAc,CAACQ,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;IACvChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACfJ,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACnBF,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IACrBoB,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;EAC/B,CAAC;;EAGD;EACA,MAAMG,cAAc,GAAG,MAAOxB,IAAI,IAAK;IAEtC,MAAMyB,aAAa,GAAG,gDAAgDC,kBAAkB,CAAC1B,IAAI,CAAC,uCAAuC;IACrI,IAAI;MACH,MAAM2B,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAAC;MAC3C,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;QACpB,MAAM;UAAEC,GAAG;UAAEC;QAAI,CAAC,GAAGJ,IAAI,CAAC,CAAC,CAAC;QAC5B,OAAO;UAAEK,QAAQ,EAAEF,GAAG;UAAEG,SAAS,EAAEF;QAAI,CAAC;MACzC,CAAC,MAAM;QACN,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;MAC7C;IACD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACfnB,OAAO,CAACmB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDC,KAAK,CAAC,kDAAkD,CAAC;MACzD,OAAO,IAAI;IACZ;EACD,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAIV,IAAI,IAAK;IACnC;IACA,MAAMW,aAAa,GAAG,EAAE;;IAExB;IACA,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,EAAE,EAAE;MACvC;MACA,MAAMC,OAAO,GAAG;QACfC,IAAI,EAAEd,IAAI,CAACc,IAAI,CAACF,KAAK,CAAC;QACtBG,kBAAkB,EAAEf,IAAI,CAACe,kBAAkB,CAACH,KAAK,CAAC;QAClDI,kBAAkB,EAAEhB,IAAI,CAACgB,kBAAkB,CAACJ,KAAK,CAAC;QAClDK,QAAQ,EAAEjB,IAAI,CAACiB,QAAQ,CAACL,KAAK,CAAC;QAC9BM,kBAAkB,EAAElB,IAAI,CAACkB,kBAAkB,CAACN,KAAK,CAAC;QAClDO,iBAAiB,EAAEnB,IAAI,CAACmB,iBAAiB,CAACP,KAAK,CAAC;QAChDQ,MAAM,EAAEpB,IAAI,CAACoB,MAAM,CAACR,KAAK;MAC1B,CAAC;;MAED;MACAD,aAAa,CAACU,IAAI,CAACR,OAAO,CAAC;IAC5B;IAEA,OAAOF,aAAa,CAAC,CAAC;EACvB,CAAC;;EAID;EACA,MAAMnB,gBAAgB,GAAG,MAAOnB,UAAU,IAAK;IAC9C,IAAIiD,YAAY,GAAGjD,UAAU,IAAIF,IAAI,CAAC,CAAC;IACvC,IAAI;MACH;MACA,MAAMoD,WAAW,GAAG,MAAM5B,cAAc,CAAC2B,YAAY,CAAC;MACtD;MACA,IAAI,CAACC,WAAW,EAAE;QACjBlC,OAAO,CAACmC,IAAI,CAAC,sDAAsD,CAAC;QACpEF,YAAY,GAAGnD,IAAI,CAAC,CAAC;QACrB,MAAMsD,kBAAkB,GAAG,MAAM9B,cAAc,CAAC2B,YAAY,CAAC,CAAC,CAAC;QAC/D,IAAI,CAACG,kBAAkB,EAAE,MAAM,IAAIlB,KAAK,CAAC,qDAAqD,CAAC;QAC/FgB,WAAW,CAAClB,QAAQ,GAAGoB,kBAAkB,CAACpB,QAAQ;QAClDkB,WAAW,CAACjB,SAAS,GAAGmB,kBAAkB,CAACnB,SAAS;MACrD;MAEA,MAAM;QAAED,QAAQ;QAAEC;MAAU,CAAC,GAAGiB,WAAW;;MAE3C;MACA,MAAMG,MAAM,GAAG,mDAAmDrB,QAAQ,cAAcC,SAAS,iHAAiH;MAClN,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC2B,MAAM,CAAC;MACpC,MAAM1B,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,MAAMU,aAAa,GAAGD,iBAAiB,CAACV,IAAI,CAAC2B,KAAK,CAAC;;MAEnD;MACAvD,OAAO,CAACkD,YAAY,CAAC;MACrB9C,cAAc,CAACmC,aAAa,CAAC;;MAE7B;MACA,MAAMvB,KAAK,GAAGF,cAAc,CAAC0C,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC/C,IAAInD,IAAI,IAAIW,KAAK,EAAE;QAClB,MAAMW,KAAK,CAAC,8BAA8B,EAAE;UAC3C8B,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACR,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAU3C,KAAK;UAC/B,CAAC;UACD4C,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,aAAa,EAAEb;UAAa,CAAC;QACrD,CAAC,CAAC;MACH;IACD,CAAC,CAAC,OAAOd,KAAK,EAAE;MACfnB,OAAO,CAACmB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDC,KAAK,CAAC,iEAAiE,CAAC;IACzE;EACD,CAAC;;EAED;EACAnD,SAAS,CAAC,MAAM;IACf,MAAM8B,KAAK,GAAGF,cAAc,CAAC0C,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/C,MAAMQ,YAAY,GAAGlD,cAAc,CAAC0C,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;IAEzD,IAAIxC,KAAK,IAAIgD,YAAY,EAAE;MAC1B1D,OAAO,CAAC;QAAEU,KAAK;QAAEG,QAAQ,EAAE6C;MAAa,CAAC,CAAC,CAAC,CAAC;MAC5C5C,gBAAgB,CAAC4C,YAAY,CAAC,CAAC,CAAC;IACjC,CAAC,MAAM;MACN5C,gBAAgB,CAACrB,IAAI,CAAC,CAAC,CAAC;IACzB;EACD,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMkE,UAAU,GAAG,CAAC5D,IAAI,CAAC,CAAC;;EAE1B,oBACCX,OAAA;IAAKwE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACnBzE,OAAA,CAACP,MAAM;MACNiF,eAAe,EAAE7D,kBAAmB;MACpC8D,YAAY,EAAE1D,eAAgB;MAC9BN,IAAI,EAAEA,IAAK;MACXiE,aAAa,EAAEjD;IAAc;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACFhF,OAAA,CAACN,MAAM;MACNa,UAAU,EAAEA,UAAW;MACvBC,aAAa,EAAEA,aAAc,CAAC;MAAA;MAC9ByE,QAAQ,EAAG5E,IAAI,IAAKqB,gBAAgB,CAACrB,IAAI,IAAIE,UAAU,CAAE,CAAC;MAAA;MAC1DI,IAAI,EAAEA;IAAK;MAAAkE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eACFhF,OAAA,CAACL,OAAO;MAACuC,IAAI,EAAEzB,WAAY;MAACJ,IAAI,EAAEA,IAAK;MAAC6E,QAAQ,EAAE,CAAC,EAACvE,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEW,KAAK;IAAC;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClET,UAAU,iBAAIvE,OAAA,CAACJ,MAAM;MAAAiF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACxB7E,cAAc,iBAAIH,OAAA,CAACH,QAAQ;MAACsF,OAAO,EAAErE;IAAoB;MAAA+D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5DjE,WAAW,iBAAIf,OAAA,CAACF,KAAK;MAACqF,OAAO,EAAEjE,gBAAiB;MAACkE,cAAc,EAAEjE;IAAmB;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpF,CAAC;AAER;AAAC9E,EAAA,CAxLQD,GAAG;AAAAoF,EAAA,GAAHpF,GAAG;AA2LZ,eAAeA,GAAG;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}